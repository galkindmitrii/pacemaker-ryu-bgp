#!/bin/sh
#
# 	License:	GNU General Public License (GPL)
#	Author: 	Dmitry Galkin <galkindmitrii@gmail.com>
#	Fork from: 	Christian Eichelmann <ceichelmann@gmx.de>
#
#	Virtual IP Address by BGP protocol.
#
#	This script manages IP alias in different subnet with ryu BGP speaker.
#	It can add an IP alias, or remove one.
#
#	The ryu should be installed and BGP speaker should be started with
#       RPC active and listening on the default port (50002).
#
#       For example like this:
#
#       ryu-manager --app-lists
#       /usr/lib/python2.7/site-packages/ryu/services/protocols/bgp/application.py,
#       /usr/lib/python2.7/site-packages/ryu/services/protocols/bgp/core_manager.py
#       --bgp-app-config-file pacemaker-ryu-bgp/bgp-sample-conf.py
#
#	usage: $0 {start|stop|status|monitor|validate-all|meta-data}
#
#	The "start" arg adds an IP alias.
#	Surprisingly, the "stop" arg removes one.
#
#       OCF parameters are as below
#       OCF_RESKEY_ip	The IP address/prefix to be advertised.
#
#######################################################################
# Initialization:

: ${OCF_FUNCTIONS_DIR=${OCF_ROOT}/lib/heartbeat}
. ${OCF_FUNCTIONS_DIR}/ocf-shellfuncs

USAGE="usage: $0 {start|stop|status|monitor|validate-all|meta-data}";

#######################################################################

meta_data() {
cat <<END
<?xml version="1.0"?>
<!DOCTYPE resource-agent SYSTEM "ra-api-1.dtd">
<resource-agent name="VIPAbgp">
<version>1.0</version>

<longdesc lang="en">
Virtual IP Address by BGP protocol.
This script manages IP alias in different subnet with ryu BGP speaker.
It can add an IP alias, or remove one.
</longdesc>
<shortdesc lang="en">Manages a virtual IP address through BGP</shortdesc>

<parameters>

<parameter name="ip" unique="1" required="1">
<longdesc lang="en">
The IPv4 address in different subnet, for example "192.168.1.1/32".
</longdesc>
<shortdesc lang="en">The IP address in different subnet</shortdesc>
<content type="string" default="" />
</parameter>

</parameters>

<actions>
<action name="start"   timeout="20s" />
<action name="stop"    timeout="20s" />
<action name="monitor" depth="0"  timeout="10s" interval="5s" />
<action name="validate-all"  timeout="10s" />
<action name="meta-data"  timeout="10s" />
</actions>
</resource-agent>
END
exit $OCF_SUCCESS
}

usage() {
  echo $USAGE >&2
}

start_ip() {
    stdout=$(ryu rpc-cli --peers=bgp=127.0.0.1:50002 -c 'request bgp network.add [{"prefix": "'$OCF_RESKEY_ip'"}]')
    if [ $stdout -ne "RESULT True" ]; then
        return $OCF_ERR_ARGS
    fi
    return $OCF_SUCCESS
}

stop_ip() {
    status_ip
    if [ $? -eq $OCF_SUCCESS ]; then
        stdout=$(ryu rpc-cli --peers=bgp=127.0.0.1:50002 -c 'request bgp network.del [{"prefix": "'$OCF_RESKEY_ip'"}]')
        if [ $stdout -ne "RESULT True" ]; then
            return $OCF_ERR_ARGS
        else
            return $OCF_SUCCESS
        fi
    else
        return $OCF_SUCCESS
    fi
}

status_ip() {
    for announced_ip in `ryu rpc-cli --peers=bgp=127.0.0.1:50002 -c 'request bgp operator.show [{"params": ["rib", "ipv4"], "format": "cli" }]' | grep '^ \*>' | awk '{print $2}'`
    do
        if [ "$announced_ip" = "$OCF_RESKEY_ip" ]; then
            return $OCF_SUCCESS
        fi
    done
	return $OCF_NOT_RUNNING
}

if
  [ $# -ne 1 ]
then
  usage
  exit $OCF_ERR_ARGS
fi

case $1 in
  start)	start_ip;;
  stop)		stop_ip;;
  status)	status_ip;;
  monitor)	status_ip;;
  validate-all)	check_binary $IP2UTIL
		exit $OCF_SUCCESS;;
  meta-data)	meta_data;;
  usage)	usage; exit $OCF_SUCCESS;;
  *)		usage
 		exit $OCF_ERR_ARGS
		;;
esac
